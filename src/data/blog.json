[{"id":3,"blogCategory":"React","blogTitle":"Create React App Development Environment","slug":"create-react-app-development-environment","postedOn":"July 28, 2021","author":"Shrestha Pradhuman","blogImage":"https://1.bp.blogspot.com/-sKKvaZku2Qc/YPGdJi6VQOI/AAAAAAAAAAM/okcmAskqucsMPXOGcGMvAFrbVXDT7fgGQCLcBGAsYHQ/s16000/react-success-screen%2B%25281%2529.png","blogText":"Today I will create the React Development Environment. Before I create the project let me tell you a little about React.\n\n\\\n**What is React?**\n\nReact is a JavaScript library for building user interfaces. React is used to build single-page applications.  React also allow us to create reusable UI components. for more information visit [React](https://www.blogger.com/u/2/blog/post/edit/8786400733664376562/1594740828631468891#) official website. Now I will build React development environment.\n\n### Requirement:\n\nThe latest version of Nodejs, npm, or yarn should be preinstalled.\n\nGo to the terminal and create the project folder.\n\n$ mkdir project\n\nNow create the React app using the following command.\n\n$ cd project\n\n$ npx create-react-app app-name\n\nAfter waiting for few seconds  React development environment is ready. Then inside the app root folder run command.\n\n$ cd app-name\n\n$ npm start or yarn start\n\nLet's check is it working or not. In the browser address bar type http://localhost:3000/. If It displays like this then It's ready to work on it."},{"id":2,"blogCategory":"NodeJS, ExpressJS","blogTitle":"Node JS API Development For Beginners","slug":"node-js-api-development-for-beginners","postedOn":"July 20, 2021","author":"Shrestha Pradhuman","blogImage":"https://1.bp.blogspot.com/-c6I-UQuTFuo/YPGeh69uVlI/AAAAAAAAAAU/4NQ6wMnwaxoKQCVPar43e4E77bhXnGmoACLcBGAsYHQ/w640-h269/nodeandexpress.png","blogText":"Today I will create the API server using the Node ExpressJS framework. Here I will not explain NodeJS and ExpressJS. So, please refer to other online articles. So, let's get started.\n\nOpen Terminal and create a project folder.\n\n\n\n```\n$ mkdir express-server\n```\n\n\n\nInside project folder initialize node package module.\n\n\n\n```\n$ npm init\n```\n\nIt will ask for package name, version, description, git repository, author, blah blah. So, you can put every detail or just hit enter, where it will take the default value by itself. Then we will install express using npm.\n\n```\n$ npm i -S express\n```\n\nAfter installation, it will be added under the dependencies section in the package.json file. Now we will create a new file index.js in our project folder. Where we will write code for running our server.\n\n```\n*const express = require('express'); const app = express();*\n\n*const port = process.env.PORT || 3001*\n\n/\\*\\* Here we can create a route GET, POST, PATCH\n\nDELETE Which takes two parameters request and\n\nresponse. request flows from client to server and\n\nresponse flows from server to client */\n\napp.get(\"/\",(req, res)=>{\n\nres.json({messgae:\"Get Route\"});\n\n});\n\n/\\*\\* now we will connect our server to port\n\nwe define at the top and also console the error\n\nand success message\n\n\\*/\n\napp.listen((err)=>{\n\nif(err) console.log(err)\n\nconsole.log(\\`Connected To Port ${port}\\`);\n\n});\n```\n\nAfter finishing the code we will run the code in the terminal from the root project folder.\n\n```\n$ node index.js\n```\n\nNow, we can check it in the browser by typing http://localhost:3001/ in the address bar. For more information follow the link."},{"id":1,"blogCategory":"MongoDB, Node","blogTitle":"CRUD API With Mongoose, MongoDB, Express And Node","slug":"crud-api-with-mongoose,-mongodb,-express-and-node","postedOn":"August 03, 2021","author":"Shrestha Pradhuman","blogImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--0QbcuqxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3.ap-south-1.amazonaws.com/afteracademy-server-uploads/mastering-mongoose-for-mongodb-and-node-js-mongoose-diagram-77560014632570f4.png","blogText":"Today I will create the CRUD API using Mongoose, MongoDB, Express and Node. \n\nPrerequisites:\n\n1. Node.js (latest version): Node.js is an open source, cross-platform runtime environment for developing server-side and networking applications.\n2. Express : Node.js web application framework that provides a robust set of features to develop web and mobile applications.\n3. MongoDB: No MySQL Database which uses documents and collections.\\\n   (either you can install it in your local machine or you can use [MongoDB Atlas ](https://www.blogger.com/blog/post/edit/8786400733664376562/5825975373584165378#)online. for this I will use the one I install in my local machine).\n4. Mongoose : Object Data Modelling for Node.js.\n5. Postman:  Open Source For Testing API.\n\nFirst  I will install the Node.js and MongoDB in our local machine. I am using Linux OS in my local machine. So, for installing MongoDB in machine I will follow this [site](https://www.blogger.com/blog/post/edit/8786400733664376562/5825975373584165378#), for installing Node.js I will follow this [site](https://www.blogger.com/blog/post/edit/8786400733664376562/5825975373584165378#). After Installation let's start our project.\\\n\\\nStep 1: Create Project Folder and perform node initialization\n\n```\n$: mkdir node-mongodb-mongoose\n$ cd node-mongodb-mongoose\n$ npm init -y\n```\n\nStep 2: Install the Dependencies for our project\n\n```\n$ npm install express nodemon mongoose\n```\n\nStep 3: create simple Rest API set using express.\n\n```\nconst express = require(\"express\");\n\nconst app = express();\n\nconst port = 3001;\n\n/\\*\\* Database Connection */\n\n/\\*\\* Create User Schema */\n\napp.use(express.urlencoded({ extended: true }));\n\napp.use(express.json());\n\n/\\*\\* Routes GET, POST, UPDATE,\n\nDELETE FOR CREATE, RETRIVE, UPDATE, DELETE */\n\napp.get(\"/user\", (req, res) => {\n\nres.status(200).json({ message: \"retrived\" });\n\n});\n\napp.post(\"/register\", (req, res) => {\n\nres.status(201).json({ message: \"created\" });\n\n});\n\napp.patch(\"/user/:id\", (req, res) => {\n\nres.status(200).json({ message: \"updated\" });\n\n});\n\napp.delete(\"/user/:id\", (req, res) => {\n\nres.status(204).json({ message: \"delete\" });\n\n});\n\napp.listen(port, (error) => {\n\nerror && console.log(error);\n\nconsole.log(\\`Server is listening at port ${port}\\`);\n\n});\n```\n\nStep 4 : Setup connection between Node and MongoDB using mongoose.\n\nAdd this code below the line Database Connection Comment.\n\n```\nconst mongoose = require(\"mongoose\");\n\nconst URI = \"mongodb://localhost:27017/mongodb\";\n\nmongoose\n\n.connect(URI, {\n\nuseNewUrlParser: true,\n\nuseUnifiedTopology: true,\n\nuseCreateIndex: true,\n\nuseFindAndModify: false,\n\n})\n\n.then(() => {\n\nconsole.log(\"Database Connected Successfully\");\n\n})\n\n.catch((error) => console.log(error));\n```\n\nStep 5: After Connection I will create our schema in our database.\n\nAdd below code below the line create user schema.\n\n```\nconst userSchema = mongoose.Schema({\n\nemail: {\n\ntype: String,\n\nrequired: true,\n\nunique: true,\n\nmax: 255,\n\n},\n\npassword: {\n\ntype: String,\n\nrequired: true,\n\nmax: 1024,\n\nmin: 6,\n\n},\n\n});\n\nconst User = mongoose.model(\"User\", userSchema);\n```\n\nStep 6: After creating the schema I will write the code to create, retrieve, delete and\n\nupdate the data in MongoDB using mongoose.\n\nreplace the post section with this code to create the data\n\n```\napp.post(\"/register\", async (req, res) => {\n\n/\\*\\* mongoose create code */\n\nconst user = new User(req.body);\n\ntry {\n\nawait user.save();\n\nres.status(201).json({\n\n        success: \"created successfully\"\n\n    });\n\n} catch (error) {\n\nres.status(400).json({ error: error });\n\n}\n\n});\n```\n\nreplace get section code to read the data\n\n```\napp.get(\"/user\", async (req, res) => {\n\ntry {\n\nconst users = await User.find({});\n\nres.status(200).json(users);\n\n} catch (error) {\n\nres.status(400).json({ error: error });\n\n}\n\n});\n```\n\nreplace patch section to update the data\n\n```\napp.patch(\"/user/:id\", async (req, res) => {\n\ntry {\n\nconst users = await User.findOneAndUpdate(\n\n{\n\n_id: req.params.id,\n\n},\n\n{ password: req.body.password }\n\n);\n\nres.status(200).json(\n\n       {\n\n        success: \"updated successfully\"\n\n       }\n\n    );\n\n} catch (error) {\n\nres.status(400).json({ error: error });\n\n}\n\n});\n```\n\nreplace the delete section to delete the data\n\n```\napp.delete(\"/user/:id\", async (req, res) => {\n\ntry {\n\nconst user = await User.findByIdAndDelete(\n\n            req.params.id\n\n        );\n\nres.status(204).json({\n\n           success: \"deleted successfully\"\n\n    });\n\n} catch (error) {\n\nres.status(400).json({ error: error });\n\n}\n\n});\n```\n\nStep 7: After replacing the old lines of code with above code. I am almost done. Now I will modified package.json\n\nfile to run the server. I will add start script using node dependencies nodemon.\n\n```\n{\n\n\"name\": \"server\",\n\n\"version\": \"1.0.0\",\n\n\"description\": \"\",\n\n\"main\": \"index.js\",\n\n\"scripts\": {\n\n\"test\": \"echo \"Error: no test specified\" && exit 1\",\n\n\"start\": \"nodemon index.js\"\n\n},\n\n\"keywords\": \\[],\n\n\"author\": \"\",\n\n\"license\": \"ISC\",\n\n\"dependencies\": {\n\n\"express\": \"^4.17.1\",\n\n\"mongoose\": \"^5.13.5\",\n\n\"nodemon\": \"^2.0.12\"\n\n}\n\n}\n```\n\nStep 8 : Run the server and test the CRUD API using POSTMAN.\n\n```\n$ npm start\n```\n\nPOSTMAN:\n\nGet:\n\n[![](https://1.bp.blogspot.com/-PHjI0OiBF2w/YQjwb2sfi8I/AAAAAAAAAB8/vlrqDKvnWzQUjMrOwLqu-d0nqsen9qv3ACLcBGAsYHQ/w640-h435/get.png)](https://www.blogger.com/blog/post/edit/8786400733664376562/5825975373584165378#)\n\nPost:\n\n[![](https://1.bp.blogspot.com/-Eb_ORMTCP_k/YQjxFOy6NpI/AAAAAAAAACE/mxQzfbPbUR0Il1pxfBZ5KhtY3LIHEeWzwCLcBGAsYHQ/w640-h434/post.png)](https://www.blogger.com/blog/post/edit/8786400733664376562/5825975373584165378#)\n\n\\\nlike this I created the curd API with mongoose, MongoDB, and node. Hope this will help you guys thanks."}]