[{"id":5,"blogCategory":"React","blogTitle":"Create React App Development Environment","slug":"create-react-app-development-environment","postedOn":"July 28, 2021","author":"Shrestha Pradhuman","blogImage":"https://1.bp.blogspot.com/-sKKvaZku2Qc/YPGdJi6VQOI/AAAAAAAAAAM/okcmAskqucsMPXOGcGMvAFrbVXDT7fgGQCLcBGAsYHQ/s16000/react-success-screen%2B%25281%2529.png","blogText":"Today I will create the React Development Environment. Before I create the project let me tell you a little about React.\n\n\\\n**What is React?**\n\nReact is a JavaScript library for building user interfaces. React is used to build single-page applications.  React also allow us to create reusable UI components. for more information visit [React](https://www.blogger.com/u/2/blog/post/edit/8786400733664376562/1594740828631468891#) official website. Now I will build React development environment.\n\n### Requirement:\n\nThe latest version of Nodejs, npm, or yarn should be preinstalled.\n\nGo to the terminal and create the project folder.\n\n$ mkdir project\n\nNow create the React app using the following command.\n\n$ cd project\n\n$ npx create-react-app app-name\n\nAfter waiting for few seconds  React development environment is ready. Then inside the app root folder run command.\n\n$ cd app-name\n\n$ npm start or yarn start\n\nLet's check is it working or not. In the browser address bar type http://localhost:3000/. If It displays like this then It's ready to work on it."},{"id":4,"blogCategory":"NodeJS, ExpressJS","blogTitle":"Node JS API Development For Beginners","slug":"node-js-api-development-for-beginners","postedOn":"July 20, 2021","author":"Shrestha Pradhuman","blogImage":"https://1.bp.blogspot.com/-c6I-UQuTFuo/YPGeh69uVlI/AAAAAAAAAAU/4NQ6wMnwaxoKQCVPar43e4E77bhXnGmoACLcBGAsYHQ/w640-h269/nodeandexpress.png","blogText":"Today I will create the API server using the Node ExpressJS framework. Here I will not explain NodeJS and ExpressJS. So, please refer to other online articles. So, let's get started.\n\nOpen Terminal and create a project folder.\n\n\n\n```\n$ mkdir express-server\n```\n\n\n\nInside project folder initialize node package module.\n\n\n\n```\n$ npm init\n```\n\nIt will ask for package name, version, description, git repository, author, blah blah. So, you can put every detail or just hit enter, where it will take the default value by itself. Then we will install express using npm.\n\n```\n$ npm i -S express\n```\n\nAfter installation, it will be added under the dependencies section in the package.json file. Now we will create a new file index.js in our project folder. Where we will write code for running our server.\n\n```\n*const express = require('express'); const app = express();*\n\n*const port = process.env.PORT || 3001*\n\n/\\*\\* Here we can create a route GET, POST, PATCH\n\nDELETE Which takes two parameters request and\n\nresponse. request flows from client to server and\n\nresponse flows from server to client */\n\napp.get(\"/\",(req, res)=>{\n\nres.json({messgae:\"Get Route\"});\n\n});\n\n/\\*\\* now we will connect our server to port\n\nwe define at the top and also console the error\n\nand success message\n\n\\*/\n\napp.listen((err)=>{\n\nif(err) console.log(err)\n\nconsole.log(\\`Connected To Port ${port}\\`);\n\n});\n```\n\nAfter finishing the code we will run the code in the terminal from the root project folder.\n\n```\n$ node index.js\n```\n\nNow, we can check it in the browser by typing http://localhost:3001/ in the address bar. For more information follow the link."},{"id":3,"blogCategory":"MongoDB, Node","blogTitle":"CRUD API With Mongoose, MongoDB, Express And Node","slug":"crud-api-with-mongoose,-mongodb,-express-and-node","postedOn":"August 03, 2021","author":"Shrestha Pradhuman","blogImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--0QbcuqxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3.ap-south-1.amazonaws.com/afteracademy-server-uploads/mastering-mongoose-for-mongodb-and-node-js-mongoose-diagram-77560014632570f4.png","blogText":"Today I will create the CRUD API using Mongoose, MongoDB, Express and Node. \n\nPrerequisites:\n\n1. Node.js (latest version): Node.js is an open source, cross-platform runtime environment for developing server-side and networking applications.\n2. Express : Node.js web application framework that provides a robust set of features to develop web and mobile applications.\n3. MongoDB: No MySQL Database which uses documents and collections.\\\n   (either you can install it in your local machine or you can use [MongoDB Atlas ](https://www.blogger.com/blog/post/edit/8786400733664376562/5825975373584165378#)online. for this I will use the one I install in my local machine).\n4. Mongoose : Object Data Modelling for Node.js.\n5. Postman:  Open Source For Testing API.\n\nFirst  I will install the Node.js and MongoDB in our local machine. I am using Linux OS in my local machine. So, for installing MongoDB in machine I will follow this [site](https://www.blogger.com/blog/post/edit/8786400733664376562/5825975373584165378#), for installing Node.js I will follow this [site](https://www.blogger.com/blog/post/edit/8786400733664376562/5825975373584165378#). After Installation let's start our project.\\\n\\\nStep 1: Create Project Folder and perform node initialization\n\n```\n$: mkdir node-mongodb-mongoose\n$ cd node-mongodb-mongoose\n$ npm init -y\n```\n\nStep 2: Install the Dependencies for our project\n\n```\n$ npm install express nodemon mongoose\n```\n\nStep 3: create simple Rest API set using express.\n\n```\nconst express = require(\"express\");\n\nconst app = express();\n\nconst port = 3001;\n\n/\\*\\* Database Connection */\n\n/\\*\\* Create User Schema */\n\napp.use(express.urlencoded({ extended: true }));\n\napp.use(express.json());\n\n/\\*\\* Routes GET, POST, UPDATE,\n\nDELETE FOR CREATE, RETRIVE, UPDATE, DELETE */\n\napp.get(\"/user\", (req, res) => {\n\nres.status(200).json({ message: \"retrived\" });\n\n});\n\napp.post(\"/register\", (req, res) => {\n\nres.status(201).json({ message: \"created\" });\n\n});\n\napp.patch(\"/user/:id\", (req, res) => {\n\nres.status(200).json({ message: \"updated\" });\n\n});\n\napp.delete(\"/user/:id\", (req, res) => {\n\nres.status(204).json({ message: \"delete\" });\n\n});\n\napp.listen(port, (error) => {\n\nerror && console.log(error);\n\nconsole.log(\\`Server is listening at port ${port}\\`);\n\n});\n```\n\nStep 4 : Setup connection between Node and MongoDB using mongoose.\n\nAdd this code below the line Database Connection Comment.\n\n```\nconst mongoose = require(\"mongoose\");\n\nconst URI = \"mongodb://localhost:27017/mongodb\";\n\nmongoose\n\n.connect(URI, {\n\nuseNewUrlParser: true,\n\nuseUnifiedTopology: true,\n\nuseCreateIndex: true,\n\nuseFindAndModify: false,\n\n})\n\n.then(() => {\n\nconsole.log(\"Database Connected Successfully\");\n\n})\n\n.catch((error) => console.log(error));\n```\n\nStep 5: After Connection I will create our schema in our database.\n\nAdd below code below the line create user schema.\n\n```\nconst userSchema = mongoose.Schema({\n\nemail: {\n\ntype: String,\n\nrequired: true,\n\nunique: true,\n\nmax: 255,\n\n},\n\npassword: {\n\ntype: String,\n\nrequired: true,\n\nmax: 1024,\n\nmin: 6,\n\n},\n\n});\n\nconst User = mongoose.model(\"User\", userSchema);\n```\n\nStep 6: After creating the schema I will write the code to create, retrieve, delete and\n\nupdate the data in MongoDB using mongoose.\n\nreplace the post section with this code to create the data\n\n```\napp.post(\"/register\", async (req, res) => {\n\n/\\*\\* mongoose create code */\n\nconst user = new User(req.body);\n\ntry {\n\nawait user.save();\n\nres.status(201).json({\n\n        success: \"created successfully\"\n\n    });\n\n} catch (error) {\n\nres.status(400).json({ error: error });\n\n}\n\n});\n```\n\nreplace get section code to read the data\n\n```\napp.get(\"/user\", async (req, res) => {\n\ntry {\n\nconst users = await User.find({});\n\nres.status(200).json(users);\n\n} catch (error) {\n\nres.status(400).json({ error: error });\n\n}\n\n});\n```\n\nreplace patch section to update the data\n\n```\napp.patch(\"/user/:id\", async (req, res) => {\n\ntry {\n\nconst users = await User.findOneAndUpdate(\n\n{\n\n_id: req.params.id,\n\n},\n\n{ password: req.body.password }\n\n);\n\nres.status(200).json(\n\n       {\n\n        success: \"updated successfully\"\n\n       }\n\n    );\n\n} catch (error) {\n\nres.status(400).json({ error: error });\n\n}\n\n});\n```\n\nreplace the delete section to delete the data\n\n```\napp.delete(\"/user/:id\", async (req, res) => {\n\ntry {\n\nconst user = await User.findByIdAndDelete(\n\n            req.params.id\n\n        );\n\nres.status(204).json({\n\n           success: \"deleted successfully\"\n\n    });\n\n} catch (error) {\n\nres.status(400).json({ error: error });\n\n}\n\n});\n```\n\nStep 7: After replacing the old lines of code with above code. I am almost done. Now I will modified package.json\n\nfile to run the server. I will add start script using node dependencies nodemon.\n\n```\n{\n\n\"name\": \"server\",\n\n\"version\": \"1.0.0\",\n\n\"description\": \"\",\n\n\"main\": \"index.js\",\n\n\"scripts\": {\n\n\"test\": \"echo \"Error: no test specified\" && exit 1\",\n\n\"start\": \"nodemon index.js\"\n\n},\n\n\"keywords\": \\[],\n\n\"author\": \"\",\n\n\"license\": \"ISC\",\n\n\"dependencies\": {\n\n\"express\": \"^4.17.1\",\n\n\"mongoose\": \"^5.13.5\",\n\n\"nodemon\": \"^2.0.12\"\n\n}\n\n}\n```\n\nStep 8 : Run the server and test the CRUD API using POSTMAN.\n\n```\n$ npm start\n```\n\nPOSTMAN:\n\nGet:\n\n[![](https://1.bp.blogspot.com/-PHjI0OiBF2w/YQjwb2sfi8I/AAAAAAAAAB8/vlrqDKvnWzQUjMrOwLqu-d0nqsen9qv3ACLcBGAsYHQ/w640-h435/get.png)](https://www.blogger.com/blog/post/edit/8786400733664376562/5825975373584165378#)\n\nPost:\n\n[![](https://1.bp.blogspot.com/-Eb_ORMTCP_k/YQjxFOy6NpI/AAAAAAAAACE/mxQzfbPbUR0Il1pxfBZ5KhtY3LIHEeWzwCLcBGAsYHQ/w640-h434/post.png)](https://www.blogger.com/blog/post/edit/8786400733664376562/5825975373584165378#)\n\n\\\nlike this I created the curd API with mongoose, MongoDB, and node. Hope this will help you guys thanks."},{"id":2,"blogCategory":"Node, Express, MySQL","blogTitle":"Node JS,  MySQL CRUD Application","slug":"node-js,-mysql-crud-application","postedOn":"August 14, 2021","author":"Shrestha Pradhuman","blogImage":"https://www.tutorialkart.com/wp-content/uploads/2017/09/nodejs-mysql.png","blogText":"I'll create a CRUD API using NodeJS, Express, And MySQL. So, without wasting time let's start.\n\nPrerequisites and required applications\n\nNodeJS**:** open-source, cross-platform runtime environment for developing server-side and networking applications. One should have a basic understanding of NodeJS.\nExpressJS**:**  web frameworks for NodeJS. Built on top NodeJS  HTTP module, which helps for routing, middleware, view system, etc.\nMySQL**:**  open-source relational database management system.\nIDE (integrated development environment): I am using visual studio code in my case mine. You can choose whatever you like.\n\nlet's start the project. create a project directory and initialize the project.\n\n```\n$ mkdir crud && cd crud\n$ npm init -y\n```\n\nIt will create the package.json file inside the folder. Now I will install ExpressJS, nodemon, and mysql.\n\n```\n$ npm install express mysql nodemon --save\n\n/** if you use yarn then run below command*/\n                    \n$ yarn add express mysql nodemon\n```\n\nAfter finishing the installation of all dependencies. we will make the entry point for my crud application. for this, I will first create index.js inside the project directory.\n\n```\n$ touch index.js\n```\n\nAfter creating an index.js file, we will write the code.\n\n```\nconst express = require(\"express\");\n/** port on which the server will run */\nconst port = 3001;\n/** create express app */\nconst app = express();\n/** parse request of content-type - \napplication/x-www-form-urlencoded */\napp.use(express.urlencoded({ extended: true }));\n/** parse requests of content-type - \napplication/json */\napp.use(express.json());\n/** define the root route */\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello World\");\n});\n/** listen for request */\napp.listen(port, (err) => {\n  err && console.log(err);\n  console.log(`Server is listening on port ${port}`);\n});\n```\n\nTo run this code, we will write some scripts inside the scripts section in the package.json file. \n\n```\n \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\"&&exit1\",\n    \"start\": \"nodemon index.js\"\n  },\n```\n\nNow I will go to the terminal and run my code.\n\n```\n$ npm start\n```\n\nlet me create the table inside the database before connecting to my project.\n\n```\nCREATE TABLE `core`.`post` ( `id` INT NOT NULL AUTO_INCREMENT , \n`title` VARCHAR(255) NOT NULL , `content` TEXT NOT NULL , `author` \nVARCHAR(255) NOT NULL , PRIMARY KEY (`id`)) ENGINE = InnoDB;\n```\n\nAfter creating the table inside the database. I will write the code to connect the database.\n\n```\nconst express = require(\"express\");\n/** import mysql dependecies */\nconst mysql = require(\"mysql\");\n/** port on which the server will run */\nconst port = 4001;\n/** create database connection */\nconst connection = mysql.createConnection({\n  host: \"localhost\",\n  user: \"username\",\n  password: \"password\",\n  database: \"core\",\n});\n/** connect and check the error */\nconnection.connect((err) => {\n  err && console.log(err);\n  console.log(\"Database Successfully Created\");\n});\n/** create express app */\nconst app = express();\n/** parse request of content-type - \napplication/x-www-form-urlencoded */\napp.use(express.urlencoded({ extended: true }));\n/** parse requests of content-type - \napplication/json */\napp.use(express.json());\n/** define the root route */\napp.get(\"/\", (req, res) => {\n/** retrieve data from database */\n  connection.query(\"SELECT * from post\", \n  (err, result) => {\n    if (err) console.log(err);\n    res.json(result);\n  });\n});\n/** listen for request */\napp.listen(port, (err) => {\n  err && console.log(err);\n  console.log(`Server is listening on port ${port}`);\n});\n```\n\nI will create API entry points GET, POST, UPDATE and DELETE.\n\n```\nconst express = require(\"express\");\nconst mysql = require(\"mysql\");\n/** port on which the server will run */\nconst port = 4001;\n/** create express app */\nconst app = express();\n/** parse requests of content-type - \napplication/json */\napp.use(express.json());\n/** parse request of content-type - \napplication/x-www-form-urlencoded */\napp.use(express.urlencoded({ extended: true }));\n/** database connection */\nconst connection = mysql.createConnection({\n  host: \"localhost\",\n  user: \"username\",\n  password: \"password\",\n  database: \"core\",\n});\nconnection.connect((err) => {\n  err && console.log(err);\n  console.log(\"Database Successfully Created\");\n});\n/** define the root route */\n/** get api method get */\napp.get(\"/\", (req, res) => {\n  connection.query(\"SELECT * from post\",\n  (err, result) => {\n    if (err) console.log(err);\n    res.json(result);\n  });\n});\n/** get by id api method get  */\napp.get(\"/\", (req, res) => {\n  connection.query(\"SELECT * from post\", \n  (err, result) => {\n    if (err) console.log(err);\n    res.json(result);\n  });\n});\n/** create api method post */\napp.post(\"/\", (req, res) => {\n  const { title, content, author } = req.body;\n  connection.query(\n    \"INSERT INTO post SET ?\",\n    { title, content, author },\n    (err, result) => {\n      err && console.log(err);\n      if (result) {\n        res.json(\n           { message: \"Post Successfully Created\" }\n       );\n      }\n    }\n  );\n});\n/** update api for update author method PATCH */\napp.patch(\"/:id\", (req, res) => {\n  let data = [req.body.author, req.params.id];\n  connection.query(\n    \"UPDATE post SET author = ? WHERE id = ? \",\n    data,\n    (err, result) => {\n      err && console.log(err);\n      res.json({message: \"Successfully Updated\"});\n    }\n  );\n});\n/** delete api for deleting particular data from \ndatabase method delete */\napp.delete(\"/:id\", (req, res)=>{\n  connection.query('DELETE FROM post WHERE id = ?', \n  [req.params.id], (err, result)=>{\n    err && console.log(err)\n    res.status(200).json(\n       {message: \"Successfully Deleted\"}\n    )\n  })\n})\n/** listen for request */\napp.listen(port, (err) => {\n  err && console.log(err);\n  console.log(`Server is listening on port ${port}`);\n});\n```\n\nNow, it's the final code. Where I made crud API using Node, Express, and MySQL. So, I hope you learn something coding with me."},{"id":1,"blogCategory":"REST API","blogTitle":"WHAT IS REST API","slug":"what-is-rest-api","postedOn":"December 31, 2021","author":"Shrestha Pradhuman","blogImage":"https://lh3.googleusercontent.com/3KYmpb3ygIx4bcoDK8St-sWYNtDPgmxrzMIKeMeYg6AMu8Lpe8c8Qogr_por6Smo7B3Ahx996Qjmua-KYmkk3k85MuR4OMyZ4_eJHZ4x16CmjW672xVkN0QtzqKErLDdRt73u10qc0_KT01CxTlaQkFQQN8QoYvn8Gmqs5eT6iLKx1Wu1IuuRLQZUaO7bY-ZyTlyHsHJ2wWCkoB37E0OEZhsT8eVU0nsCVjyWgWugdd94ME9CMnvJF_6oLgDvMnkB5AujaxK9EhL8XOV84aW7nfv4cee69uf4qbC-26Xt7qotPRZNusXIuhXYYM3EU5saEa4DhkOwymdchiJ8om5H4kJMW3pyEJ4gczcVdHZRNRPq0G7rgM2Nbn1Zyp4WdGdghwhGGbvbVKt2k-UN7dQikVCklGepBB3iw0ev4hBSqrayG8OrrPVS-KvNHlfY8Cx3wJZsnxrkKlH1p1kgyO_iUhldfZbosVJsIzDIIO6NEntIAhS6jfKmTvVEO7Pq9g2Sty6VMfseazevQ72HM_YWAFFrvcxBMSaLvrWWHcoqf8jLWbjU1-0ms6EhlWec8zIqULWsN2-6ra6dHFOylK-ka4qex8DeaLqbde61iq5lJdw6-ANmjrgWDYtm5DMv7Kb7QnkG5XAlMJsUs_O_9mJMZs1LcmPTDJ-DDYU9uYgOeXfWVjSfZe2eC1F24hYJfkwWcQydgKd8pNCtZwkmb7oAnk=w940-h788-no?authuser=0","blogText":"Today I am going to tell you about REST API in a simple way that I have learned till now. First,  we will look at API which stands for \"Application Program Interface\". \n\nAPI enables an application or service to access a resource within another. For example,  you have a website for your restaurant. And Uber Eats or Other food delivery websites list your resources to their website using your website API.\n\nAPI helps to exchange commands and data, but to do this requires clear protocols and architectures. So, we have some categories of API protocols and architectures. Like REST, SOAP,  RPC. But Today Topic is REST so we will talk about the REST over here.\n\nREST is a set of architectural constraints, which stands for  \"representational state transfer\" and was created by computer scientist Roy Fielding. It is the most popular approach for building APIs.\n\n### What defines a REST API?\n\nIn order for an API to be considered RESTful, it has to conform to these criteria:\n\n1. Uniform interface:- All API requests should look concise and the same.\n2. Client-Server:- Client & Server must be completely independent of each other. \n3. Stateless:-  Server isn't allowed to store any data related to a client request.\n4. Cache:- Improve performance on the client, scalability on the server-side.\n5. Layered System:- allow for the introduction of proxies, gateways, and firewalls.\n6. Code on demand: responses can also contain executable code.\n\n### How do REST APIs work?\n\nREST APIs communicate via HTTP requests to perform CRUD operations within a resource. A request is made up of four things:\n\n1. The Endpoint  (or route) is the url you request for. eg:- https://api.spotify.com/v1/artists.\n2. The Method (POST, GET, DELETE, PUT, etch)\n3. The Headers (Provide information such as authentication, body content)\n4. The Data(or Body) (contains information you want to send to the server)\n\n### Why REST?\n\n1. works with XML, JSON, HTTP, and plain text.\n2. provide a great deal of flexibility.\n3. easier to work with\n4. caching is easier\n5. highly scalable\n\nIn conclusion, I think this is what REST API? So, I hope this will be helpful for you."}]